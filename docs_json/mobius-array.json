{
	"id": 0,
	"name": "mobius-array",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 76,
			"name": "\"_export\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-array/src/typescript/_export.ts",
			"sources": [
				{
					"fileName": "_export.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"calc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-array/src/typescript/calc.ts",
			"comment": {
				"shortText": "Array functions that obtain and return information from an input array. Does not modify input array."
			},
			"children": [
				{
					"id": 7,
					"name": "includes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 8,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for a value in an array and returns true if found.\nItems must match both the value and type of specified value<br/>",
								"text": "Returns false if no items in array match specified value.\n",
								"returns": "Returns true if value can be found in array, false if value cannot be found.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [6,2,2,7]\nexists = Array.includes(arr,2)\n\nExpected value of exists is true.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 9,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 10,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 69,
							"character": 24
						}
					]
				},
				{
					"id": 2,
					"name": "indexOf",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for a value in an array and returns the index position if found.\nItems must match both the value and type of specified value<br/>",
								"text": "Returns -1 if no items in array match specified value.\n",
								"returns": "Index position or array of index positions containing specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "array = [6,2,2,7]\npositions = Array.indexOf(array,2,true)\n\nExpected value of positions is [1,2].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 5,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 6,
									"name": "search_all",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Returns index position for all instances of specified value if true, returns only the first\n     instance if false."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 36,
							"character": 23
						}
					]
				},
				{
					"id": 11,
					"name": "massAdd",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 12,
							"name": "massAdd",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sums up all the values in an array.",
								"returns": "Number",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3]\nsum = Array.massAdd(arr)\n\nExpected value of sum is 6.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 13,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array of numbers."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 90,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						7,
						2,
						11
					]
				}
			],
			"sources": [
				{
					"fileName": "calc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 14,
			"name": "\"create\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-array/src/typescript/create.ts",
			"children": [
				{
					"id": 18,
					"name": "byConcat",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 19,
							"name": "byConcat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Combines two arrays into a new array.",
								"returns": "Combined array (array1 first, followed by array2).",
								"tags": [
									{
										"tag": "example",
										"text": "arr1 = [1,2,3]\narr2 = [9,0]\nnewarr = Array.concat(arr1,arr2)\n\nExpected value of newarr is [1,2,3,9,0].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 20,
									"name": "arr1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "First array."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 21,
									"name": "arr2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Second array."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 29,
							"character": 24
						}
					]
				},
				{
					"id": 15,
					"name": "byCopy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 16,
							"name": "byCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new array by making a copy of an existing array.",
								"returns": "New duplicated array.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3]\ncopy = Array.Copy(arr)\n\nExpected value of copy is [1,2,3].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 17,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to copy."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 12,
							"character": 22
						}
					]
				},
				{
					"id": 22,
					"name": "byFlatten",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 23,
							"name": "byFlatten",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Flattens an n-dimensional array into a one-dimensional array.",
								"returns": "Flattened array.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3,[4,5]]\nflatten = Array.flatten(arr)</code>\n\nExpected value of flatten is [1,2,3,4,5].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 24,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to flatten."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 45,
							"character": 25
						}
					]
				},
				{
					"id": 30,
					"name": "byRange",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 31,
							"name": "byRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new array of integer numbers between two bounds.\nLower bound is inclusive and upper bound is exclusive.",
								"returns": "New array.",
								"tags": [
									{
										"tag": "example",
										"text": "array = Array.range(0,5)\n\nExpected value of array is [0,1,2,3,4].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 32,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lower bound integer."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 33,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upper bound integer."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 84,
							"character": 23
						}
					]
				},
				{
					"id": 25,
					"name": "bySlice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 26,
							"name": "bySlice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a copy of a portion of an array, from start index to end index (end not included).",
								"returns": "A new arr.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3,4,5]\nresult = Array.slice(arr,1,3)\n\nExpected value of result is [2,3].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 27,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to slice."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 28,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index at which to begin slicing.\n     A negative index can be used, indicating an offset from the end of the sequence.\n     If start is undefined, slice begins from index 0."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 29,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index before which to end slicing. Slice extracts up to but not including end.\n     A negative index can be used, indicating an offset from the end of the sequence.\n     If end is undefined, slice extracts through the end of the sequence."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 66,
							"character": 23
						}
					]
				},
				{
					"id": 34,
					"name": "flattenDeep",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 35,
							"name": "flattenDeep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Util functions."
							},
							"parameters": [
								{
									"id": 36,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 97,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						18,
						15,
						22,
						30,
						25,
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "create.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 37,
			"name": "\"modify\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-array/src/typescript/modify.ts",
			"comment": {
				"shortText": "Array functions that modify an input array and return a new array."
			},
			"children": [
				{
					"id": 38,
					"name": "append",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 39,
							"name": "append",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds one item to the end of an array\nIf item is an array, the entire array will be appended as one item.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3]\nappend = Array.append(arr,4)\n\nExpected value of arr is [1,2,3,4].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 40,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 41,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 16,
							"character": 22
						}
					]
				},
				{
					"id": 42,
					"name": "appendFront",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 43,
							"name": "appendFront",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds one item to the front of an array\nIf the item is an array, the entire array will be appended as one item.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3]\nappend = Array.appendFront(arr,4)\n\nExpected value of arr is [4,1,2,3].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 44,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 45,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 34,
							"character": 27
						}
					]
				},
				{
					"id": 46,
					"name": "removeIndex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "removeIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the item at the specified index from an array",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3]\nremove = Array.removeIndex(arr,1)\n\nExpected value of remove is [1,3].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 48,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to remove item from."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 49,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index number of item to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 51,
							"character": 27
						}
					]
				},
				{
					"id": 50,
					"name": "removeValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 51,
							"name": "removeValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes items that match specified value from an array\nItems must match both the value and type of specified value<br/>",
								"text": "Returns original array if no items in array match specified value.\n",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,2,3]\nremove = Array.removeValue(arr,2,true)\n\nExpected value of remove is [1,3].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 52,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to remove item from."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 53,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 54,
									"name": "remove_all",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Removes all instances of specified value if true, removes only the first instance if\n     false."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 73,
							"character": 27
						}
					]
				},
				{
					"id": 55,
					"name": "replaceValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 56,
							"name": "replaceValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces items that match specified value from an array with a new value\nItems must match both the value and type of specified value<br/>",
								"text": "Returns original array if no items in array match specified value.\n",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,2,3]\nreplace = Array.replaceValue(arr,2,9,true)\n\nExpected value of replace is [1,9,9,3].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 57,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to remove item from."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 58,
									"name": "value1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 59,
									"name": "value2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to replace existing value with."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 60,
									"name": "replace_all",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Replaces all instances of specified value if true, replaces only the first instance if\n     false."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 101,
							"character": 28
						}
					]
				},
				{
					"id": 61,
					"name": "reverse",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 62,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverses the order of items in an array and returns a new array.",
								"returns": "New reversed array.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [1,2,3]\nresult = Array.reverse(arr)\n\nExpected value of result is [3,2,1].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 63,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to reverse."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 124,
							"character": 23
						}
					]
				},
				{
					"id": 64,
					"name": "sortAlpha",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 65,
							"name": "sortAlpha",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts an array of strings alphabetically\nIf items are not strings, they are treated as strings.<br/>",
								"text": "Items are sorted according to string Unicode code points (character by character, numbers before upper case\nalphabets, upper case alphabets before lower case alphabets)\n",
								"tags": [
									{
										"tag": "example",
										"text": "array = [\"1\",\"2\",\"10\",\"Orange\",\"apple\"]\nsort = Array.sortAlpha(array)\n\nExpected value of array is [\"1\",\"10\",\"2\",\"Orange\",\"apple\"].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 66,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to sort."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 143,
							"character": 25
						}
					]
				},
				{
					"id": 67,
					"name": "sortNum",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 68,
							"name": "sortNum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts an array of numbers in ascending order\nThe array must contain numbers.",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [56,6,48]\nsort = Array.sortNum(arr)\n\nExpected value of arr is [6,48,56].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 69,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 159,
							"character": 23
						}
					]
				},
				{
					"id": 70,
					"name": "splice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 71,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds and/or removes items to/from an array",
								"text": "If no items_to_add are specified, then items are only removed.\nIf num_to_remove is 0, then items are only added.<br/>\n",
								"tags": [
									{
										"tag": "example",
										"text": "arr = [10, 20, 30, 40, 50]\nresult = Array.splice(arr, 1, 3, [2.2, 3.3])\n\nExpected value of result is [10, 2.2, 3.2, 50].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 72,
									"name": "arr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array to splice"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 73,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index at which to add/remove items. (Items are added/removed after specified index)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 74,
									"name": "num_to_remove",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number of items to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 75,
									"name": "items_to_add",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array of items to add."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 180,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						38,
						42,
						46,
						50,
						55,
						61,
						64,
						67,
						70
					]
				}
			],
			"sources": [
				{
					"fileName": "modify.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				76,
				1,
				14,
				37
			]
		}
	]
}